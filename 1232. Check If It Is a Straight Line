

You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the 
coordinate of a point. Check if these points make a straight line in the XY plane.

Example 1:


Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
Output: true
Example 2:

Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]
Output: false


Solution _________________________________________________________________________________________________________________


Consistent Comparison: By fixing x0 and y0 as the reference, the code compares every other point in the set to this first point.

This simplifies the comparison because every other point is checked against the same reference, ensuring consistency in how the slope is calculated.

Avoiding Division: By using cross products rather than directly comparing slopes (which would involve division), 
the code avoids potential issues with floating-point precision.




If the slopes are equal, the points lie on the same line. If any comparison fails, the points do not lie on a straight line, and the function returns false




class Solution {
    public boolean checkStraightLine(int[][] coordinates) {


        // Get the first point (x0, y0) and the second point (x1, y1)
        int x0 = coordinates[0][0];
        int y0 = coordinates[0][1];
        int x1 = coordinates[1][0];
        int y1 = coordinates[1][1];
        
        // Calculate the slope difference for all subsequent points
        for (int i = 2; i < coordinates.length; i++) {
            int x = coordinates[i][0];
            int y = coordinates[i][1];
            
            // Use cross multiplication to avoid division and floating-point precision issues
            if ((y - y0) * (x1 - x0) != (y1 - y0) * (x - x0)) {
                return false;
            }
        }
        return true;
    }
    
        
    }
