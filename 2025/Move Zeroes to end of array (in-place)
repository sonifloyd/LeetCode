1. Two-Pointer Approach (Efficient - Best Choice)
public void moveZeroes(int[] nums) {
    int nonZeroIndex = 0;

    // Move non-zero elements to the front
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] != 0) {
            nums[nonZeroIndex++] = nums[i];
        }
    }

    // Fill remaining with zeroes
    while (nonZeroIndex < nums.length) {
        nums[nonZeroIndex++] = 0;
    }
}


Time: O(n)
Space: O(1)


2. Two-Pointer with Swapping
(Swaps elements to maintain relative order)

java
Copy
Edit
public void moveZeroes(int[] nums) {
    int j = 0;
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] != 0) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            j++;
        }
    }
}
Time: O(n)
Space: O(1)


3. Brute Force (Not Recommended for Interview)
java
Copy
Edit
public void moveZeroes(int[] nums) {
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] == 0) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[j] != 0) {
                    // swap
                    int temp = nums[j];
                    nums[j] = nums[i];
                    nums[i] = temp;
                    break;
                }
            }
        }
    }
}
Time: O(n²)
Space: O(1)


4. Collect and Fill (Two-pass method)
java
Copy
Edit
public void moveZeroes(int[] nums) {
    int index = 0;
    for (int num : nums) {
        if (num != 0) {
            nums[index++] = num;
        }
    }

    while (index < nums.length) {
        nums[index++] = 0;
    }
}
Time: O(n)
Space: O(1)

✅ Example
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

