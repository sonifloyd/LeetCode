A technique used on arrays/strings to find a subarray or substring matching a condition, usually with:

A start pointer

An end pointer

Move these pointers to create a "window" that slides through the array.

Initial Window:
start = 0, end = 2 (nums[0..2] = 2,1,5)
Sum = 2+1+5 = 8

Next Window:
start = 1, end = 3
Remove nums[0]=2, Add nums[3]=1
Sum = 8 - 2 + 1 = 7

Next Window:
start = 2, end = 4
Remove nums[1]=1, Add nums[4]=3
Sum = 7 - 1 + 3 = 9

Next Window:
start = 3, end = 5
Remove nums[2]=5, Add nums[5]=2
Sum = 9 - 5 + 2 = 6

--------------------
Find the maximum sum subarray of size K
nums = [2, 1, 5, 1, 3, 2]
k = 3

public int maxSumSubarray(int[] nums, int k) {
    int maxSum = 0;
    int windowSum = 0;
    int start = 0;

    for (int end = 0; end < nums.length; end++) {
        windowSum += nums[end];

        if (end >= k - 1) {
            maxSum = Math.max(maxSum, windowSum);
            windowSum -= nums[start];
            start++;
        }
    }
    return maxSum;
}
