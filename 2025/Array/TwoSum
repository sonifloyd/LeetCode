
Input: nums = [2, 7, 11, 15], target = 9  
Output: [0, 1] // because 2 + 7 = 9

public int[] twoSum(int[] nums, int target) {
    for (int i = 0; i < nums.length; i++) {
        for (int j = i + 1; j < nums.length; j++) {
            if (nums[i] + nums[j] == target) {
                return new int[] {i, j};
            }
        }
    }
    return new int[] {}; // if not found
}
Time Complexity: O(nÂ²)

Space Complexity: O(1)

2. Optimized with HashMap (One Pass)
public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < nums.length; i++) {
        int diff = target - nums[i];
        if (map.containsKey(diff)) {
            return new int[] {map.get(diff), i};
        }
        map.put(nums[i], i);
    }
    return new int[] {};
}

Time Complexity: O(n)

Space Complexity: O(n)
3. Preprocessing with HashMap (Two Pass)
public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < nums.length; i++) {
        map.put(nums[i], i);
    }
    for (int i = 0; i < nums.length; i++) {
        int diff = target - nums[i];
        if (map.containsKey(diff) && map.get(diff) != i) {
            return new int[] {i, map.get(diff)};
        }
    }
    return new int[] {};
}

Time: O(n)

Space: O(n)

